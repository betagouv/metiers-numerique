generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================================================
// Constants

enum FileType {
  EXTERNAL

  DOC
  DOCX
  JPG
  PDF
  PNG
  PPT
  PPTX
  SVG
}

enum JobSource {
  // Civils de la Défense
  CDLD
  // Métiers du Numérique
  MDN
  // Place de l'emploi public
  PEP
  // TODO Remove those Job Sources once legacy jobs are gone.
  MNB
  MNN
  SKB
}

enum JobContractType {
  // Fonctionnaire d'État ou contractuel
  NATIONAL_CIVIL_SERVANT_OR_CONTRACT_WORKER
  // Contractuel de la fonction publique
  CONTRACT_WORKER_ONLY
  // Freelance
  FREELANCER
  // Apprentissage
  APPRENTICESHIP
  // Stagiaire
  INTERN
  // VIA (VIE)
  INTERNATIONAL_VOLUNTEER

  // LEGACY !!DO NOT USE!!
  CONTRACT_WORKER
  NATIONAL_CIVIL_SERVANT
  PART_TIME
  PERMANENT
  TEMPORARY
}

enum JobRemoteStatus {
  FULL
  NONE
  PARTIAL
}

enum JobState {
  FILLED
  DRAFT
  PUBLISHED
}

enum LegacyInstitutionSection {
  address
  joinTeam
  keyNumbers
  motivation
  organization
  project
  testimonial
  value
}

enum UserRole {
  ADMINISTRATOR
  RECRUITER
  CANDIDATE
}

enum JobApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// =========================================================
// Models

model Address {
  id         String   @id @default(cuid())
  // API Adresse (adresse.data.gouv.fr) ID
  // This should be a nullable unique but it's a planned Prisma feature for now:
  // https://github.com/prisma/prisma/issues/3387
  // TODO Follow nullable unique Prisma feature progress and implement it once ready.
  sourceId   String?
  street     String
  postalCode String
  city       String
  region     String
  // Two-letter country code following ISO 3166-1 alpha-2 standard
  // https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
  country    String   @default("FR")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  jobs Job[] @relation("JobAddress")
}

model ArchivedJob {
  id                 String    @id @default(cuid())
  sourceId           String    @unique
  title              String
  isPublished        Boolean   @default(true)
  missionDescription String
  profileDescription String?
  recruiterName      String
  region             String
  slug               String    @unique
  source             JobSource
  createdAt          DateTime  @default(now())
  expiredAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  profession   Profession @relation("ArchivedJobProfession", fields: [professionId], references: [id])
  professionId String
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  position  String?
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applicationContactsOnJobs Job[] @relation("JobApplicationContacts")
  infoContactOnJobs         Job[] @relation("JobInfoContact")
}

model File {
  id        String   @id @default(cuid())
  url       String   @unique
  type      FileType
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  filesOnLegacyInstitutions              FilesOnLegacyInstitutions[]
  relatedLogoFileLegacyInstitutions      LegacyInstitution[]         @relation("legacyInstitutionLogoFile")
  relatedThumbnailFileLegacyInstitutions LegacyInstitution[]         @relation("legacyInstitutionThumbnailFile")
  relatedLogoInstitution                 Institution[]               @relation("InstitutionLogoFile")
  relatedAvatarTestimony                 Testimony[]                 @relation("TestimonyAvatarFile")
  fileOnJobApplication                   JobApplication[]            @relation("JobApplicationCVFile")
  recruiter                              Recruiter?                  @relation("RecruiterLogoFile")
}

model FilesOnLegacyInstitutions {
  legacyInstitution   LegacyInstitution        @relation(fields: [legacyInstitutionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  legacyInstitutionId String
  file                File                     @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId              String
  section             LegacyInstitutionSection
  assignedAt          DateTime                 @default(now())

  @@id([legacyInstitutionId, fileId])
}

model Institution {
  id                              String           @id @default(cuid())
  name                            String           @unique
  slug                            String           @unique
  createdAt                       DateTime         @default(now())
  updatedAt                       DateTime         @updatedAt

  url                             String?
  logoFile                        File?            @relation("InstitutionLogoFile", fields: [logoFileId], references: [id])
  logoFileId                      String?          @unique

  pageTitle                       String?
  testimonyTitle                  String?
  description                     String?
  challenges                      String?
  mission                         String?
  structure                       String?
  organisation                    String?

  testimonies                     Testimony[]      @relation("TestimonyInstituion")
  recruiters                      Recruiter[]      @relation("RecruiterInstitution")
  candidatesHiddenFromInstitution Candidate[]      @relation("CandidateHiddenFromInstitutions")
  users                           User[]           @relation("UserInstitution")
}

model Testimony {
	id               String      @id @default(cuid())
	createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt @default(now())
	name             String
	job              String
	avatarFile       File?       @relation("TestimonyAvatarFile", fields: [avatarFileId], references: [id])
	avatarFileId     String?     @unique
	testimony        String
	institution      Institution @relation("TestimonyInstituion", fields: [institutionId], references: [id])
  institutionId    String
}

model Job {
  id                         String            @id @default(cuid())
  title                      String
  contextDescription         String?
  missionDescription         String
  missionVideoUrl            String?
  particularitiesDescription String?
  tasksDescription           String?
  teamDescription            String?
  perksDescription           String?
  processDescription         String?
  profileDescription         String?
  applicationWebsiteUrl      String?
  contractTypes              JobContractType[]
  // Job URL on place-emploi-public.gouv.fr
  remoteStatus               JobRemoteStatus   @default(NONE)
  salaryMax                  Int?
  salaryMin                  Int?
  seniorityInMonths          Int               @default(0)
  slug                       String            @unique
  source                     JobSource         @default(MDN)
  // This should be a nullable unique but it's a planned Prisma feature for now:
  // https://github.com/prisma/prisma/issues/3387
  // TODO Follow nullable unique Prisma feature progress and implement it once ready.
  sourceUrl                  String?
  state                      JobState          @default(DRAFT)
  createdAt                  DateTime          @default(now())
  expiredAt                  DateTime
  updatedAt                  DateTime

  address                    Address?          @relation("JobAddress", fields: [addressId], references: [id])
  addressId                  String?
  applicationContacts        Contact[]         @relation("JobApplicationContacts")
  infoContact                Contact?          @relation("JobInfoContact", fields: [infoContactId], references: [id])
  infoContactId              String?
  leads                      Lead[]            @relation("LeadJobSource")
  domains                    Domain[]          @relation("JobDomains")
  profession                 Profession?       @relation("JobProfession", fields: [professionId], references: [id])
  professionId               String?
  recruiter                  Recruiter?        @relation("JobRecruiter", fields: [recruiterId], references: [id])
  recruiterId                String?
  applications               JobApplication[] @relation("JobApplicationJob")
}

model Lead {
  id             String   @id @default(cuid())
  email          String?
  withAlert      Boolean  @default(false)
  withNewsletter Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  fromJob   Job?    @relation("LeadJobSource", fields: [fromJobId], references: [id])
  fromJobId String?
}

model LegacyEntity {
  // Notion ID
  id String @id @default(uuid())

  fullName String?
  logoUrl  String?
  name     String?

  services LegacyService[]
}

model LegacyInstitution {
  // Notion ID
  id String @id @default(uuid())

  address           String?
  challenges        String?
  fullName          String?
  hiringProcess     String?
  isPublished       Boolean  @default(false)
  joinTeam          String?
  keyNumbers        String?
  logoFile          File?    @relation(name: "legacyInstitutionLogoFile", fields: [logoFileId], references: [id])
  logoFileId        String?
  missions          String?
  motivation        String?
  organization      String?
  profile           String?
  project           String?
  schedule          String?
  slug              String   @unique
  socialNetworkUrls String[]
  testimonial       String?
  thumbnailFile     File?    @relation(name: "legacyInstitutionThumbnailFile", fields: [thumbnailFileId], references: [id])
  thumbnailFileId   String?
  title             String?
  value             String?
  websiteUrls       String[]

  files FilesOnLegacyInstitutions[]
}

model LegacyJob {
  // Notion ID
  id String @id @default(uuid())

  advantages            String?
  conditions            String?
  createdAt             DateTime  @default(now())
  department            String[]
  entity                String?
  experiences           String[]
  hiringProcess         String?
  isMigrated            Boolean   @default(false)
  limitDate             DateTime?
  locations             String[]
  mission               String?
  more                  String?
  openedToContractTypes String[]
  profile               String?
  publicationDate       DateTime?
  // Used as an internal reference for debugging purposes
  reference             String
  salary                String?
  slug                  String    @unique
  source                JobSource
  state                 JobState  @default(DRAFT)
  tasks                 String?
  team                  String?
  teamInfo              String?
  title                 String
  toApply               String?
  updatedAt             DateTime  @updatedAt

  legacyService   LegacyService? @relation(fields: [legacyServiceId], references: [id])
  legacyServiceId String?
}

model LegacyService {
  // Notion ID
  id String @id @default(uuid())

  fullName  String?
  name      String?
  region    String?
  shortName String?
  url       String?

  legacyJobs     LegacyJob[]
  legacyEntity   LegacyEntity? @relation(fields: [legacyEntityId], references: [id])
  legacyEntityId String?
}

model Domain {
  id         String      @id @default(cuid())
  name       String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  jobs       Job[]       @relation("JobDomains")
  candidates Candidate[] @relation("CandidateDomains")
}

model Profession {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobs         Job[]         @relation("JobProfession")
  archivedJobs ArchivedJob[] @relation("ArchivedJobProfession")
}

model Recruiter {
  id          String    @id @default(cuid())
  name        String    @unique
  displayName String?
  fullName    String?
  logoFile    File?     @relation("RecruiterLogoFile", fields: [logoFileId], references: [id])
  logoFileId  String?   @unique
  source      JobSource @default(MDN)
  websiteUrl  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  children      Recruiter[]  @relation("RecruiterFamily")
  institution   Institution? @relation("RecruiterInstitution", fields: [institutionId], references: [id])
  institutionId String?
  jobs          Job[]        @relation("JobRecruiter")
  parent        Recruiter?   @relation("RecruiterFamily", fields: [parentId], references: [id])
  parentId      String?
  // See User.recruiter comment
  users         User[]       @relation("UserRecruiter")
}

// https://github.com/betagouv/nexauth/blob/main/e2e/with-prisma/prisma/schema.prisma
model RefreshToken {
  id        String   @id @default(cuid())
  familyId  String
  ip        String
  value     String   @unique
  createdAt DateTime @default(now())
  expiredAt DateTime

  user   User   @relation("UserRefreshToken", fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

// https://github.com/betagouv/nexauth/blob/main/e2e/with-prisma/prisma/schema.prisma
model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password  String
  role      UserRole @default(RECRUITER)
  isActive  Boolean  @default(false)

  firstName String
  lastName  String
  email     String   @unique

  extra     Json     @default("{}")

  institution   Institution?   @relation("UserInstitution", fields: [institutionId], references: [id])
  institutionId String?
  // TODO Wait for "Field does not exist on enclosing type." Prisma issue resolution.
  // https://github.com/prisma/prisma/issues/9553
  recruiter     Recruiter?     @relation("UserRecruiter", fields: [recruiterId], references: [id])
  recruiterId   String?
  candidate     Candidate?     @relation("CandidateUser")
  refreshTokens RefreshToken[] @relation("UserRefreshToken")
}

model Candidate {
	id                     String           @id @default(cuid())
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt

	user                   User             @relation("CandidateUser", fields: [userId], references: [id])
	userId                 String

  phone                  String
  region                 String
  contractTypes          JobContractType[]
  currentJob             String
  yearsOfExperience      Int?              @default(0)
  githubUrl              String?
  linkedInUrl            String?
  portfolioUrl           String?

  domains                Domain[]         @relation("CandidateDomains")
  hiddenFromInstitutions Institution[]    @relation("CandidateHiddenFromInstitutions")

  jobApplications        JobApplication[] @relation("JobApplicationCandidate")
}

model JobApplication {
	id                String               @id @default(cuid())
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  candidate         Candidate            @relation("JobApplicationCandidate", fields: [candidateId], references: [id])
  candidateId       String

  job               Job?                 @relation("JobApplicationJob", fields: [jobId], references: [id])
  jobId             String?

  applicationLetter String
  status            JobApplicationStatus @default(PENDING)
  rejectionReason   String?

  cvFile            File                 @relation("JobApplicationCVFile", fields: [cvFileId], references: [id])
  cvFileId          String
}
